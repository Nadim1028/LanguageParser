/*SAMPLE INPUT
String1-abcbdab
String2-bdcaba
*/
#include <bits/stdc++.h>
using namespace std;

#define UP -1
#define LEFT -2
#define DIAGONAL -3

int b[100][100] = {0};
int c[100][100];
char lcs[100];
string str;
int len;

int lcsLength(string x, string y, int m, int n){
    for (int i = 0; i <= m ; i++){
        c[i][0]=0;
    }
    for (int j = 0; j <= n ; j++){
        c[0][j]=0;
    }

    for (int i = 1; i <= m; i++){
        for (int j = 1; j <= n; j++){
            if (x[i - 1] == y[j - 1]){
                c[i][j] = c[i - 1][j - 1] + 1;
                b[i][j] = DIAGONAL;
            }
            else if (c[i - 1][j] >= c[i][j - 1]){
                c[i][j] = c[i - 1][j];
                b[i][j] = UP;
            }else{
                c[i][j] = c[i][j - 1];
                b[i][j] = LEFT;
            }
        }
    }
    return c[m][n];
}

void printLcs(string x, int i, int j)
{
    int idx=len;
    lcs[len]='\0';

    if (i==0 || j==0){
        return;
    }
    if (b[i][j] == DIAGONAL){
        lcs[--idx]=x[i-1];
        //cout <<lcs[idx];
        str.push_back(lcs[idx]);
        printLcs(x,i-1,j-1);
    }else if(b[i][j]== UP){
        printLcs(x,i-1,j);
    }else{
        printLcs(x,i,j-1);
    }
}


int main()
{
    //freopen("lcsInput.txt", "r", stdin);
    string x, y;
    int m, n;
    cin >> x >> y;
    m = x.length();
    n = y.length();
    len = lcsLength(x, y, m, n);
    cout << len << endl;
    printLcs(x, m, n);
    //cout << str << endl;
    reverse(str.begin(),str.end());
    cout << "Longest Common Subsequence : " ;
    cout << str <<endl;




}